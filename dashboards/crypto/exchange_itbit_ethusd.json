{"version":1,"allow_edit":true,"plugins":[],"panes":[{"title":"BTCUSD","width":1,"row":{"3":1,"4":1,"5":1},"col":{"3":1,"4":1,"5":1},"col_width":2,"widgets":[{"type":"text_widget","settings":{"title":"24H VOLUME in ETH","size":"regular","value":"var vol = parseFloat(datasources[\"itbit-ticker-btcusd\"][\"volume24h\"])\n\nreturn (vol).toFixed(6).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"ETH"}},{"type":"text_widget","settings":{"title":"24H VOLUME","size":"regular","value":"var bid = parseFloat(datasources[\"itbit-ticker-btcusd\"][\"bid\"])\nvar ask = parseFloat(datasources[\"itbit-ticker-btcusd\"][\"ask\"])\nvar price = (ask + bid) / 2\nvar vol = parseFloat(datasources[\"itbit-ticker-btcusd\"][\"volume24h\"])\n\nreturn (vol * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}},{"type":"text_widget","settings":{"title":"Today: OPEN-HIGH-LOW","size":"regular","value":"return \"O:\"+datasources[\"itbit-ticker-btcusd\"][\"openToday\"]+\" | \"+ \"H:\"+datasources[\"itbit-ticker-btcusd\"][\"highToday\"]+\" | \"+\"L:\"+datasources[\"itbit-ticker-btcusd\"][\"lowToday\"]","animate":true}},{"type":"text_widget","settings":{"title":"24-Hour High Low ","size":"regular","value":"return \"H:\"+datasources[\"itbit-ticker-btcusd\"][\"high24h\"]+\" | \"+\"L:\"+datasources[\"itbit-ticker-btcusd\"][\"low24h\"]","animate":true}},{"type":"text_widget","settings":{"title":"MID-PRICE","size":"regular","value":"var bid = parseFloat(datasources[\"itbit-ticker-btcusd\"][\"bid\"])\nvar ask = parseFloat(datasources[\"itbit-ticker-btcusd\"][\"ask\"])\nvar price = (ask + bid) / 2\n\nreturn (price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","sparkline":false,"animate":true,"units":"USD"}},{"type":"text_widget","settings":{"title":"Current Spread","size":"regular","value":"var bid = parseFloat(datasources[\"itbit-ticker-btcusd\"][\"bid\"])\nvar ask = parseFloat(datasources[\"itbit-ticker-btcusd\"][\"ask\"])\nvar spread = ask - bid\n\nvar midprice = (bid+ask)/2\nvar spreadBPS = (spread/midprice)*10000\nreturn \"$\"+spread.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')+\" (\"+spreadBPS.toFixed(2)+\" bps)\"","animate":true,"units":""}},{"type":"text_widget","settings":{"title":"Last Execution","size":"regular","value":"return datasources[\"itbit-ticker-btcusd\"][\"lastAmt\"] + \"@\" +datasources[\"itbit-ticker-btcusd\"][\"lastPrice\"]\n","animate":true}},{"type":"text_widget","settings":{"title":"Orderbook: TOP BID","size":"regular","value":"var data = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar expected_order_size = 100000\nvar total_order_size = 0\nvar total_order_qty = 0\nvar order_size = 0\n\nvar p_init = parseFloat(data[0][0]) // expected price / best price / top of orderbook\nvar p_final = 0 // final executed price given the order_size\n\nfor (var i=0; i<data.length; i++){\n    \n    order_size = parseFloat(data[i][0]) * parseFloat(data[i][1])\n    total_order_size += order_size\n    total_order_qty += parseFloat(data[i][1])\n\n    if (total_order_size >= expected_order_size)\n    {\n        p_final = data[i][0] // capture the final executed price\n        p_average = total_order_size / total_order_qty // avg out the executed price by \n        break;\n    }\n}\n\nvar slippages = (Math.abs(p_final - p_init) / p_init) * 10000 // this compute using final executed price\nvar slippages2 = (Math.abs(p_average - p_init) / p_init) * 10000 // this compuate using avg settle price \n\n//return ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\nreturn parseFloat(data[0][1]).toFixed(8)+'@'+p_init.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\n","sparkline":false,"animate":true,"units":""}},{"type":"text_widget","settings":{"title":"Orderbook: TOP ASK","size":"regular","value":"var data = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar expected_order_size = 100000\nvar total_order_size = 0\nvar total_order_qty = 0\nvar order_size = 0\n\nvar p_init = parseFloat(data[0][0]) // expected price / best price / top of orderbook\nvar p_final = 0 // final executed price given the order_size\n\nfor (var i=0; i<data.length; i++){\n    \n    order_size = parseFloat(data[i][0]) * parseFloat(data[i][1])\n    total_order_size += order_size\n    total_order_qty += parseFloat(data[i][1])\n\n    if (total_order_size >= expected_order_size)\n    {\n        p_final = data[i][0] // capture the final executed price\n        p_average = total_order_size / total_order_qty // avg out the executed price by \n        break;\n    }\n}\n\nvar slippages = (Math.abs(p_final - p_init) / p_init) * 10000 // this compute using final executed price\nvar slippages2 = (Math.abs(p_average - p_init) / p_init) * 10000 // this compuate using avg settle price \n\n//return ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\nreturn parseFloat(data[0][1]).toFixed(8)+'@'+p_init.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\n","sparkline":false,"animate":true,"units":""}},{"type":"text_widget","settings":{"title":"Total ETH Bids in the Orderbook","size":"regular","value":"var data = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar expected_order_size = 100000\nvar total_order_size = 0\nvar total_order_qty = 0\nvar order_size = 0\n\nvar p_init = parseFloat(data[0][0]) // expected price / best price / top of orderbook\nvar p_final = 0 // final executed price given the order_size\n\nfor (var i=0; i<data.length; i++){\n    \n    order_size = parseFloat(data[i][0]) * parseFloat(data[i][1])\n    total_order_size += order_size\n    total_order_qty += parseFloat(data[i][1])\n}\n\n\n\n//return ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\nreturn total_order_qty.toFixed(8).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\n","animate":true,"units":"ETH"}},{"type":"text_widget","settings":{"title":"Total ETH Asks in the Orderbook","size":"regular","value":"var data = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar expected_order_size = 100000\nvar total_order_size = 0\nvar total_order_qty = 0\nvar order_size = 0\n\nvar p_init = parseFloat(data[0][0]) // expected price / best price / top of orderbook\nvar p_final = 0 // final executed price given the order_size\n\nfor (var i=0; i<data.length; i++){\n    \n    order_size = parseFloat(data[i][0]) * parseFloat(data[i][1])\n    total_order_size += order_size\n    total_order_qty += parseFloat(data[i][1])\n}\n\n\n\n//return ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\nreturn total_order_qty.toFixed(8).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\n","animate":true,"units":"ETH"}},{"type":"text_widget","settings":{"title":"ORDERS COUNT","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nreturn \"B: \"+bids.length+\", A:\"+asks.length","animate":true}}]},{"title":"BTCUSD liquidity: 50 bps","width":1,"row":{"3":1,"4":1,"5":25},"col":{"3":3,"4":4,"5":1},"col_width":1,"widgets":[{"type":"text_widget","settings":{"title":"LIQ: BIDS + ASKS","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar bsum = 0\nvar asum = 0\nvar depth = 0.005\n\nvar askPrice = parseFloat(asks[0][0])\nvar bidPrice = parseFloat(bids[0][0])\nvar price = (askPrice + bidPrice) / 2\nvar bid1 = price - (depth * price)\nvar ask1 = price + (depth * price)\n\n\nfor (var i=0; i<bids.length; i++){\n    var cprice = bids[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice >= bid1){\n        bsum += parseFloat(bids[i][1])\n    }\n}\n\nfor (var i=0; i<asks.length; i++){\n    var cprice = asks[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice <= ask1){\n        asum += parseFloat(asks[i][1])\n    }\n}\n\nreturn ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}},{"type":"text_widget","settings":{"title":"BIDS","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar sum = 0\nvar depth = 0.005\n\nvar askPrice = parseFloat(asks[0][0])\nvar bidPrice = parseFloat(bids[0][0])\nvar price = (askPrice + bidPrice) / 2\nvar bid1 = price - (depth * price)\nvar ask1 = price + (depth * price)\n\n\nfor (var i=0; i<bids.length; i++){\n    var cprice = bids[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice >= bid1){\n        sum += parseFloat(bids[i][1])\n    }\n}\n\nreturn (sum * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}},{"type":"text_widget","settings":{"title":"ASKS","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar sum = 0\nvar depth = 0.005\n\nvar askPrice = parseFloat(asks[0][0])\nvar bidPrice = parseFloat(bids[0][0])\nvar price = (askPrice + bidPrice) / 2\nvar bid1 = price - (depth * price)\nvar ask1 = price + (depth * price)\n\n\nfor (var i=0; i<asks.length; i++){\n    var cprice = asks[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice <= ask1){\n        sum += parseFloat(asks[i][1])\n    }\n}\n\nreturn (sum * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}}]},{"title":"Slippages at $250k","width":1,"row":{"3":1,"4":1},"col":{"3":2,"4":3},"col_width":1,"widgets":[{"type":"text_widget","settings":{"title":"Slippages, BUY @ $250k","size":"regular","value":"var data = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar expected_order_size = 250000\nvar total_order_size = 0\nvar total_order_qty = 0\nvar order_size = 0\n\nvar p_init = parseFloat(data[0][0]) // expected price / best price / top of orderbook\nvar p_final = 0 // final executed price given the order_size\n\nfor (var i=0; i<data.length; i++){\n    \n    order_size = parseFloat(data[i][0]) * parseFloat(data[i][1])\n    total_order_size += order_size\n    total_order_qty += parseFloat(data[i][1])\n\n    if (total_order_size >= expected_order_size)\n    {\n        p_final = data[i][0] // capture the final executed price\n        p_average = total_order_size / total_order_qty // avg out the executed price by \n        break;\n    }\n}\n\nvar slippages = (Math.abs(p_final - p_init) / p_init) * 10000 // this compute using final executed price\nvar slippages2 = (Math.abs(p_average - p_init) / p_init) * 10000 // this compuate using avg settle price \n\n//return ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\nreturn slippages.toFixed(8)\n\n","animate":true,"units":"bps"}},{"type":"text_widget","settings":{"title":"Slippages, SELL @ $250k","size":"regular","value":"var data = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar expected_order_size = 250000\nvar total_order_size = 0\nvar total_order_qty = 0\nvar order_size = 0\n\nvar p_init = parseFloat(data[0][0]) // expected price / best price / top of orderbook\nvar p_final = 0 // final executed price given the order_size\n\nfor (var i=0; i<data.length; i++){\n    \n    order_size = parseFloat(data[i][0]) * parseFloat(data[i][1])\n    total_order_size += order_size\n    total_order_qty += parseFloat(data[i][1])\n\n    if (total_order_size >= expected_order_size)\n    {\n        p_final = data[i][0] // capture the final executed price\n        p_average = total_order_size / total_order_qty // avg out the executed price by \n        break;\n    }\n}\n\nvar slippages = (Math.abs(p_final - p_init) / p_init) * 10000 // this compute using final executed price\nvar slippages2 = (Math.abs(p_average - p_init) / p_init) * 10000 // this compuate using avg settle price \n\n//return ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\nreturn slippages.toFixed(8)\n\n","animate":true,"units":"bps"}}]},{"title":"Slippages at $500k","width":1,"row":{"3":7,"4":7},"col":{"3":2,"4":3},"col_width":1,"widgets":[{"type":"text_widget","settings":{"title":"Slippages, BUY @ $500k","size":"regular","value":"var data = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar expected_order_size = 500000\nvar total_order_size = 0\nvar total_order_qty = 0\nvar order_size = 0\n\nvar p_init = parseFloat(data[0][0]) // expected price / best price / top of orderbook\nvar p_final = 0 // final executed price given the order_size\n\nfor (var i=0; i<data.length; i++){\n    \n    order_size = parseFloat(data[i][0]) * parseFloat(data[i][1])\n    total_order_size += order_size\n    total_order_qty += parseFloat(data[i][1])\n\n    if (total_order_size >= expected_order_size)\n    {\n        p_final = data[i][0] // capture the final executed price\n        p_average = total_order_size / total_order_qty // avg out the executed price by \n        break;\n    }\n}\n\nvar slippages = (Math.abs(p_final - p_init) / p_init) * 10000 // this compute using final executed price\nvar slippages2 = (Math.abs(p_average - p_init) / p_init) * 10000 // this compuate using avg settle price \n\n//return ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\nreturn slippages.toFixed(8)\n\n","animate":true,"units":"bps"}},{"type":"text_widget","settings":{"title":"Slippages, SELL @ $500k","size":"regular","value":"var data = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar expected_order_size = 500000\nvar total_order_size = 0\nvar total_order_qty = 0\nvar order_size = 0\n\nvar p_init = parseFloat(data[0][0]) // expected price / best price / top of orderbook\nvar p_final = 0 // final executed price given the order_size\n\nfor (var i=0; i<data.length; i++){\n    \n    order_size = parseFloat(data[i][0]) * parseFloat(data[i][1])\n    total_order_size += order_size\n    total_order_qty += parseFloat(data[i][1])\n\n    if (total_order_size >= expected_order_size)\n    {\n        p_final = data[i][0] // capture the final executed price\n        p_average = total_order_size / total_order_qty // avg out the executed price by \n        break;\n    }\n}\n\nvar slippages = (Math.abs(p_final - p_init) / p_init) * 10000 // this compute using final executed price\nvar slippages2 = (Math.abs(p_average - p_init) / p_init) * 10000 // this compuate using avg settle price \n\n//return ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\nreturn slippages.toFixed(8)\n\n","animate":true,"units":"bps"}}]},{"title":"btcusd liquidity: 25 bps","width":1,"row":{"3":9,"4":9,"5":17},"col":{"3":3,"4":4,"5":1},"col_width":1,"widgets":[{"type":"text_widget","settings":{"title":"LIQ: BID + ASK ","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar bsum = 0\nvar asum = 0\nvar depth = 0.0025\n\nvar askPrice = parseFloat(asks[0][0])\nvar bidPrice = parseFloat(bids[0][0])\nvar price = (askPrice + bidPrice) / 2\nvar bid1 = price - (depth * price)\nvar ask1 = price + (depth * price)\n\n\nfor (var i=0; i<bids.length; i++){\n    var cprice = bids[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice >= bid1){\n        bsum += parseFloat(bids[i][1])\n    }\n}\n\nfor (var i=0; i<asks.length; i++){\n    var cprice = asks[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice <= ask1){\n        asum += parseFloat(asks[i][1])\n    }\n}\n\nreturn ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}},{"type":"text_widget","settings":{"title":"BIDS","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar sum = 0\nvar depth = 0.0025\n\nvar askPrice = parseFloat(asks[0][0])\nvar bidPrice = parseFloat(bids[0][0])\nvar price = (askPrice + bidPrice) / 2\nvar bid1 = price - (depth * price)\nvar ask1 = price + (depth * price)\n\n\nfor (var i=0; i<bids.length; i++){\n    var cprice = bids[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice >= bid1){\n        sum += parseFloat(bids[i][1])\n    }\n}\n\nreturn \" \" + (sum * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}},{"type":"text_widget","settings":{"title":"ASKS","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar sum = 0\nvar depth = 0.0025\n\nvar askPrice = parseFloat(asks[0][0])\nvar bidPrice = parseFloat(bids[0][0])\nvar price = (askPrice + bidPrice) / 2\nvar bid1 = price - (depth * price)\nvar ask1 = price + (depth * price)\n\n\nfor (var i=0; i<asks.length; i++){\n    var cprice = asks[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice <= ask1){\n        sum += parseFloat(asks[i][1])\n    }\n}\n\nreturn (sum * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}}]},{"title":"Slippages at $750k","width":1,"row":{"3":13,"4":13},"col":{"3":2,"4":3},"col_width":1,"widgets":[{"type":"text_widget","settings":{"title":"Slippages, BUY @ $750k","size":"regular","value":"var data = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar expected_order_size = 750000\nvar total_order_size = 0\nvar total_order_qty = 0\nvar order_size = 0\n\nvar p_init = parseFloat(data[0][0]) // expected price / best price / top of orderbook\nvar p_final = 0 // final executed price given the order_size\n\nfor (var i=0; i<data.length; i++){\n    \n    order_size = parseFloat(data[i][0]) * parseFloat(data[i][1])\n    total_order_size += order_size\n    total_order_qty += parseFloat(data[i][1])\n\n    if (total_order_size >= expected_order_size)\n    {\n        p_final = data[i][0] // capture the final executed price\n        p_average = total_order_size / total_order_qty // avg out the executed price by \n        break;\n    }\n}\n\nvar slippages = (Math.abs(p_final - p_init) / p_init) * 10000 // this compute using final executed price\nvar slippages2 = (Math.abs(p_average - p_init) / p_init) * 10000 // this compuate using avg settle price \n\n//return ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\nreturn slippages.toFixed(8)\n\n","animate":true,"units":"bps"}},{"type":"text_widget","settings":{"title":"Slippages, SELL @ $750k","size":"regular","value":"var data = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar expected_order_size = 750000\nvar total_order_size = 0\nvar total_order_qty = 0\nvar order_size = 0\n\nvar p_init = parseFloat(data[0][0]) // expected price / best price / top of orderbook\nvar p_final = 0 // final executed price given the order_size\n\nfor (var i=0; i<data.length; i++){\n    \n    order_size = parseFloat(data[i][0]) * parseFloat(data[i][1])\n    total_order_size += order_size\n    total_order_qty += parseFloat(data[i][1])\n\n    if (total_order_size >= expected_order_size)\n    {\n        p_final = data[i][0] // capture the final executed price\n        p_average = total_order_size / total_order_qty // avg out the executed price by \n        break;\n    }\n}\n\nvar slippages = (Math.abs(p_final - p_init) / p_init) * 10000 // this compute using final executed price\nvar slippages2 = (Math.abs(p_average - p_init) / p_init) * 10000 // this compuate using avg settle price \n\n//return ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\nreturn slippages.toFixed(8)\n\n","animate":true,"units":"bps"}}]},{"title":"BTCUSD LIQUIDITY 100 bps","width":1,"row":{"3":17,"4":17,"5":33},"col":{"3":3,"4":4,"5":1},"col_width":1,"widgets":[{"type":"text_widget","settings":{"title":"LIQ: BIDS + ASKS","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar bsum = 0\nvar asum = 0\nvar depth = 0.01\n\nvar askPrice = parseFloat(asks[0][0])\nvar bidPrice = parseFloat(bids[0][0])\nvar price = (askPrice + bidPrice) / 2\nvar bid1 = price - (depth * price)\nvar ask1 = price + (depth * price)\n\n\nfor (var i=0; i<bids.length; i++){\n    var cprice = bids[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice >= bid1){\n        bsum += parseFloat(bids[i][1])\n    }\n}\n\nfor (var i=0; i<asks.length; i++){\n    var cprice = asks[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice <= ask1){\n        asum += parseFloat(asks[i][1])\n    }\n}\n\nreturn ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}},{"type":"text_widget","settings":{"title":"BIDS","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar sum = 0\nvar depth = 0.01\n\nvar askPrice = parseFloat(asks[0][0])\nvar bidPrice = parseFloat(bids[0][0])\nvar price = (askPrice + bidPrice) / 2\nvar bid1 = price - (depth * price)\nvar ask1 = price + (depth * price)\n\n\nfor (var i=0; i<bids.length; i++){\n    var cprice = bids[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice >= bid1){\n        sum += parseFloat(bids[i][1])\n    }\n}\n\nreturn (sum * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}},{"type":"text_widget","settings":{"title":"ASKS","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar sum = 0\nvar depth = 0.01\n\nvar askPrice = parseFloat(asks[0][0])\nvar bidPrice = parseFloat(bids[0][0])\nvar price = (askPrice + bidPrice) / 2\nvar bid1 = price - (depth * price)\nvar ask1 = price + (depth * price)\n\n\nfor (var i=0; i<asks.length; i++){\n    var cprice = asks[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice <= ask1){\n        sum += parseFloat(asks[i][1])\n    }\n}\n\nreturn (sum * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}}]},{"title":"Slippages at $1M","width":1,"row":{"3":19,"4":19},"col":{"3":2,"4":3},"col_width":1,"widgets":[{"type":"text_widget","settings":{"title":"Slippages, BUY @ $1M","size":"regular","value":"var data = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar expected_order_size = 1000000\nvar total_order_size = 0\nvar total_order_qty = 0\nvar order_size = 0\n\nvar p_init = parseFloat(data[0][0]) // expected price / best price / top of orderbook\nvar p_final = 0 // final executed price given the order_size\n\nfor (var i=0; i<data.length; i++){\n    \n    order_size = parseFloat(data[i][0]) * parseFloat(data[i][1])\n    total_order_size += order_size\n    total_order_qty += parseFloat(data[i][1])\n\n    if (total_order_size >= expected_order_size)\n    {\n        p_final = data[i][0] // capture the final executed price\n        p_average = total_order_size / total_order_qty // avg out the executed price by \n        break;\n    }\n}\n\nvar slippages = (Math.abs(p_final - p_init) / p_init) * 10000 // this compute using final executed price\nvar slippages2 = (Math.abs(p_average - p_init) / p_init) * 10000 // this compuate using avg settle price \n\n//return ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\nreturn slippages.toFixed(8)\n\n","animate":true,"units":"bps"}},{"type":"text_widget","settings":{"title":"Slippages, SELL @ $1M","size":"regular","value":"var data = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar expected_order_size = 1000000\nvar total_order_size = 0\nvar total_order_qty = 0\nvar order_size = 0\n\nvar p_init = parseFloat(data[0][0]) // expected price / best price / top of orderbook\nvar p_final = 0 // final executed price given the order_size\n\nfor (var i=0; i<data.length; i++){\n    \n    order_size = parseFloat(data[i][0]) * parseFloat(data[i][1])\n    total_order_size += order_size\n    total_order_qty += parseFloat(data[i][1])\n\n    if (total_order_size >= expected_order_size)\n    {\n        p_final = data[i][0] // capture the final executed price\n        p_average = total_order_size / total_order_qty // avg out the executed price by \n        break;\n    }\n}\n\nvar slippages = (Math.abs(p_final - p_init) / p_init) * 10000 // this compute using final executed price\nvar slippages2 = (Math.abs(p_average - p_init) / p_init) * 10000 // this compuate using avg settle price \n\n//return ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n\nreturn slippages.toFixed(8)\n\n","animate":true,"units":"bps"}}]},{"title":"BTCUSD LIQUIDITY 200 bps","width":1,"row":{"3":25,"4":25,"5":41},"col":{"3":3,"4":4,"5":1},"col_width":1,"widgets":[{"type":"text_widget","settings":{"title":"BIDS + ASKS","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar bsum = 0\nvar asum = 0\nvar depth = 0.02\n\nvar askPrice = parseFloat(asks[0][0])\nvar bidPrice = parseFloat(bids[0][0])\nvar price = (askPrice + bidPrice) / 2\nvar bid1 = price - (depth * price)\nvar ask1 = price + (depth * price)\n\n\nfor (var i=0; i<bids.length; i++){\n    var cprice = bids[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice >= bid1){\n        bsum += parseFloat(bids[i][1])\n    }\n}\n\nfor (var i=0; i<asks.length; i++){\n    var cprice = asks[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice <= ask1){\n        asum += parseFloat(asks[i][1])\n    }\n}\n\nreturn ((asum+bsum) * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}},{"type":"text_widget","settings":{"title":"BIDS","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar sum = 0\nvar depth = 0.02\n\nvar askPrice = parseFloat(asks[0][0])\nvar bidPrice = parseFloat(bids[0][0])\nvar price = (askPrice + bidPrice) / 2\nvar bid1 = price - (depth * price)\nvar ask1 = price + (depth * price)\n\n\nfor (var i=0; i<bids.length; i++){\n    var cprice = bids[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice >= bid1){\n        sum += parseFloat(bids[i][1])\n    }\n}\n\nreturn (sum * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}},{"type":"text_widget","settings":{"title":"ASKS","size":"regular","value":"var bids = datasources[\"itbit-orderbook-btcusd\"][\"bids\"]\nvar asks = datasources[\"itbit-orderbook-btcusd\"][\"asks\"]\nvar sum = 0\nvar depth = 0.02\n\nvar askPrice = parseFloat(asks[0][0])\nvar bidPrice = parseFloat(bids[0][0])\nvar price = (askPrice + bidPrice) / 2\nvar bid1 = price - (depth * price)\nvar ask1 = price + (depth * price)\n\n\nfor (var i=0; i<asks.length; i++){\n    var cprice = asks[i][0]\n    // if current orderbook price >= top 1% bid price, add them to liq pool sum\n    if (cprice <= ask1){\n        sum += parseFloat(asks[i][1])\n    }\n}\n\nreturn (sum * price).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')","animate":true,"units":"USD"}}]}],"datasources":[{"name":"itbit-orderbook-btcusd","type":"JSON","settings":{"url":"https://api.itbit.com/v1/markets/ETHUSD/order_book","use_thingproxy":false,"refresh":30,"method":"GET"}},{"name":"itbit-ticker-btcusd","type":"JSON","settings":{"url":"https://api.itbit.com/v1/markets/ETHUSD/ticker","use_thingproxy":true,"refresh":30,"method":"GET"}}],"columns":4}